{"version":3,"sources":["../src/textlint-rule-no-insert-dropping-sa.js"],"names":["assert","require","arrayFindIndex","kuromojin","createMatcher","saInsertDict","saDroppingDict","matchAll","concat","findSaTokenIndex","tokens","actualTokens","saTokenIndex","token","hasOwnProperty","word_position","actualSaToken","replaceWithCaptureTokens","text","resultText","forEach","index","_capture","actualToken","replace","surface_form","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","tokenize","then","matchResults","firstToken","matchResult","lastToken","length","firstWordIndex","Math","max","lastWorkIndex","dict","message","expected","fix","replaceTextRange","module","exports","linter"],"mappings":"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","file":"textlint-rule-no-insert-dropping-sa.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nconst assert = require(\"assert\");\nconst arrayFindIndex = require(\"array-find-index\");\nconst kuromojin = require(\"kuromojin\");\nconst createMatcher = require(\"morpheme-match-all\");\nconst saInsertDict = require(\"./dict/sa-insert-dict\");\nconst saDroppingDict = require(\"./dict/sa-dropping-dict\");\nconst matchAll = createMatcher(saInsertDict.concat([\n    saDroppingDict\n]));\n/**\n * 実際に一致してるtokenのindexを返す\n * 「さ」のtokenのindexを返すイメージ\n * 「さ」がない場合は先頭のindex\n * @param tokens\n * @param actualTokens\n * @returns {number}\n */\nconst findSaTokenIndex = (tokens, actualTokens) => {\n    const saTokenIndex = arrayFindIndex(tokens, (token) => {\n        return token.hasOwnProperty(\"_index\");\n    });\n    // 無い場合は先頭を返す\n    if (saTokenIndex === -1) {\n        return actualTokens[0].word_position - 1;\n    }\n    // assert(saTokenIndex !== -1, \"「さ」のtokenが見つかりません。Issueで報告してください。\");\n    const actualSaToken = actualTokens[saTokenIndex];\n    return actualSaToken.word_position - 1;\n};\n\nconst replaceWithCaptureTokens = (text, tokens, actualTokens) => {\n    let resultText = text;\n    tokens.forEach((token, index) => {\n        // _captureがないのは無視\n        if (!token._capture) {\n            return;\n        }\n        const actualToken = actualTokens[index];\n        resultText = resultText.replace(token._capture, actualToken.surface_form);\n    });\n    return resultText;\n};\nconst reporter = (context) => {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node){\n            const text = getSource(node);\n            return kuromojin.tokenize(text).then(tokens => {\n                const matchResults = matchAll(tokens);\n                matchResults.forEach(matchResult => {\n                    const firstToken = matchResult.tokens[0];\n                    const lastToken = matchResult.tokens[matchResult.tokens.length - 1];\n                    const firstWordIndex = Math.max(firstToken.word_position - 1, 0);\n                    const lastWorkIndex = Math.max(lastToken.word_position - 1, 0);\n                    const saTokenIndex = findSaTokenIndex(matchResult.dict.tokens, matchResult.tokens);\n                    // replace $1\n                    const message = replaceWithCaptureTokens(matchResult.dict.message, matchResult.dict.tokens, matchResult.tokens);\n                    const expected = replaceWithCaptureTokens(matchResult.dict.expected, matchResult.dict.tokens, matchResult.tokens);\n                    if (expected) {\n                        report(node, new RuleError(message, {\n                            index: saTokenIndex,\n                            fix: fixer.replaceTextRange([\n                                firstWordIndex, lastWorkIndex + lastToken.surface_form.length\n                            ], expected)\n                        }));\n                    } else {\n                        report(node, new RuleError(message, {\n                            index: saTokenIndex\n                        }));\n                    }\n                });\n            });\n        }\n    }\n};\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};"]}